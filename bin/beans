#!/usr/bin/env node
/*jshint -W097, -W033, node: true, esversion: 6 */
"use strict";

var argv = require("yargs").argv;
var colors = require("colors");
var _ = require("lodash");
var chokidar = require("chokidar");

var riot = require('@riotjs/compiler')

const fs = require("fs");
const path = require("path");
const { exec, execSync } = require("child_process");

var dirname = process.cwd();
const module_bin_folder = __dirname.replace(/\/bin$/, '/node_modules/.bin')

function findFilesInDir(startPath, filter) {
  var results = [];

  const files = fs.readdirSync(startPath);
  for (let i = 0; i < files.length; i++) {
    const filename = path.join(startPath, files[i]);
    const stat = fs.lstatSync(filename);
    if (stat.isDirectory()) {
      results = results.concat(findFilesInDir(filename, filter)); //recurse
    } else if (filename.indexOf(filter) >= 0) {
      results.push(filename);
    }
  }
  return results;
}

const run_specs = () => {
  exec("./luaonbeans.org -i beans.lua specs", (error, stdout, stderr) => {
    if (error) {
      console.log("Specs failed !".red);
      console.log(error.toString());
      console.log(stdout.toString());
      console.log(stderr.toString());
    } else {
      console.log(stdout.toString());
      console.log("Specs passed successfully!".green);
    }
  });
};

const buildVendorAssets = () => {
  let vendor_files = findFilesInDir("app", "vendor_src");
  _.each(vendor_files, async (file) => {
    console.log(`Processing ${file}`)
    const file_ext = _.last(file.split("."));
    const file_dest = "./public/" + file.split("/").splice(-2,1)[0] + "_vendor." + file_ext;
    let asset_data = [];
    const content = fs.readFileSync(file, 'utf8');
    content.split("\n").forEach((line) => {
      if (line.trim()) {
        try {
          const response = execSync(`curl -s "${line.trim()}"`, { encoding: 'utf8' });
          asset_data.push(response);
          console.log(`✅ ${line.trim()} fetched ${response.length} bytes`)
        } catch (error) {
          console.error(`Error fetching ${line.trim()}: ${error.message}`);
        }
      }
    });

    fs.writeFileSync(file_dest, asset_data.join("\n"));
    console.log(`✅ ${file_dest} created with ${asset_data.length} assets`)
  })
}

const args = process.argv.slice(2);

if (argv.w || args[0] == "dev") {
  // Running specs
  if (argv.t) run_specs();

  const port = argv.p || 8080;

  exec("./luaonbeans.org -D . -s -P luaonbeans.pid -L development.log -p" + port, (error, stdout, stderr) => {
    if (error) {
      console.log("Error starting server:".red, error.message);
      console.log(stdout.toString());
      console.log(stderr.toString());
    } else {
      console.log(stdout.toString());
    }
  })

  console.log(`Server started on http://localhost:${port}`.cyan);

  // tailwindcss
  console.log("Searching for tailwind css files ...");

  let tw_files = findFilesInDir("app", "_tw_src");
  console.log(tw_files);

  _.each(tw_files, (file) => {
    var path = file.split("/");
    path.splice(-1);

    exec(
      module_bin_folder + "/tailwindcss -i " +
      file +
      " -o public/" +
      _.last(path) +
      ".css -w -m -c " +
      path.join("/") +
      "/tailwind.config.js"
    );
  });

  //console.log("Watching folder.", dirname);
  chokidar
    .watch(dirname, { ignored: /(^|[\/\\])\../ })
    .on("all", (event, path) => {
      if (event == "change") {
        //console.log("change : ", path.replace(dirname, ""));
        if (argv.t) run_specs();
        if (_.last(path.split(".")) == "riot") {
          var currentPath = process.cwd()

          fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
              console.error(err);
              return;
            }
            try {
              const { code, map } = riot.compile(data, {
                // transform the `:host` css rules
                scopedCss: true,
                // expressions delimiters
                brackets: ['{', '}'],
                // keep HTML comments
                comments: false
              })
              fs.mkdirSync("./public/" + path.replace(currentPath, "").split("/").slice(0, -1).join("/"), { recursive: true })
              fs.writeFileSync("./public/" + path.replace(currentPath, "") + ".js", code)
              console.log(_.last(path.split("/")).yellow + " compiled".green)
            } catch (err) {
              console.log(_.last(path.split("/")).yellow + " not compiled".red)
              console.log(err)
            }
          });
        }
      }
    });
} else {
  if (args[0] == "build-vendor") {
    buildVendorAssets()
  } else if (args[0] == "new") {
    if (args[1] == undefined) {
      console.log("ERROR".red);
      console.log("syntax : beans new myproject".yellow);
    } else {
      process.stdout.write("📦 ");
      execSync(
        "git clone --depth=1 https://github.com/solisoft/luaonbeans.git " +
          args[1],
      );
      execSync("rm -Rf " + args[1] + "/.git");
      execSync(
        "cp " +
          args[1] +
          "/config/database.json.arangodb.sample " +
          args[1] +
          "/config/database.json",
      );
      execSync("rm -Rf " + args[1] + "/docs");
      execSync("rm -Rf " + args[1] + "/.github");
      console.log("✅ Project created !");
      execSync("cd " + args[1] + " && git init");
    }
  } else if (args[0] == "build") {
    //buildVendorAssets()
    execSync("cp luaonbeans.org build.org");
    execSync("zip build.org .init.lua");
    execSync("zip -r build.org .lua");
    execSync("zip -r build.org aqlpages");
    execSync("zip -r build.org app");
    execSync("zip -r build.org public");
    execSync("zip -r build.org specs");
    execSync("zip -r build.org migrations");
    execSync("zip -r build.org config");

    console.log("📦 build.org built successfully!");
  } else if (args[0] == "update") {
    console.log("🐳 Updating luaonbeans...");
    process.stdout.write("📦 ");
    execSync(
      "git clone --depth=1 https://github.com/solisoft/luaonbeans.git _update",
    );
    console.log("📦 copying .lua/* files");
    execSync("cp _update/luaonbeans.org .");
    execSync("cp -Rvf _update/.lua/* .lua");
    execSync("cp -Rvf _update/.templates/* .templates");
    execSync("rm -Rvf _update");
    console.log("✅ Updated!");
  } else if (args[0] == "specs") {
    console.log("running specs");
    run_specs();
  } else if (args[0] == "swagger") {
    const glob = require("glob");
    const path = require("path");

    const files = glob.sync("app/controllers/**/*.lua");

    let openapi_doc = { openapi: "3.0.1", info: { title: "", version: "" }, paths: {} }
    let current_path = ""

    let data = ""
    let current_tag = null
    let current_http_verb = null

    var set_current_tag = function () {
      //console.log("set_current_tag", current_tag, data)
      if (current_tag && data != "") {
        if (current_tag.includes('response')) {
          const code = current_tag.replace('response_', '')
          openapi_doc.paths[current_path][current_http_verb].responses[code].content = {}
          openapi_doc.paths[current_path][current_http_verb].responses[code].content['application/json'] = {}
          openapi_doc.paths[current_path][current_http_verb].responses[code].content['application/json']['schema'] = { type: "object", properties: {} }

          let properties = {};
          const json = JSON.parse(data.trim())
          _.each(_.keys(json), (key) => {
            properties[key] = json[key]
          })
          openapi_doc.paths[current_path][current_http_verb].responses[code].content['application/json']['schema'].properties = properties
        } else {
          openapi_doc.paths[current_path][current_http_verb][current_tag] = data.trim();
        }
        current_tag = ""
      }
      data = ""
    }

    files.forEach((file) => {
      const content = fs.readFileSync(file, "utf8");
      content.split("\n").forEach((line) => {
        line = line.trim()
        if (line.startsWith("--")) {
          line = line.replace("--", "").trim()
          if (line[0] == "@") {
            const args = line.split(" ")

            if(args[0] == "@path") {
              set_current_tag(current_tag, data)
              current_http_verb = args[1].toLowerCase()
              current_path = args[2]
              openapi_doc.paths[args[2]] ||= { [current_http_verb]: { parameters: [], tags: [], responses: {} } }
            }
            if (args[0] == "@tag") {
              set_current_tag(current_tag, data)
              openapi_doc.paths[current_path][current_http_verb].tags.push(args.slice(1).join(' '))
            }
            if(args[0] == "@header") {
              set_current_tag(current_tag, data)
              openapi_doc.paths[current_path][current_http_verb].parameters.push({
                name: args[1],
                in: 'header',
                schema: {
                  type: args[2].replace("*", "").trim(),
                  example: args.slice(3).join(' ')
                },
                required: args[2].includes("*")
              })
            }
            if (args[0] == "@summary") {
              set_current_tag(current_tag, data)
              openapi_doc.paths[current_path][current_http_verb].summary = args.slice(1).join(' ')
            }
            if (args[0] == "@description") {
              set_current_tag(current_tag, data)
              openapi_doc.paths[current_path][current_http_verb].description = args.slice(1).join(' ')
              current_tag = 'description'
            }
            if(args[0] == "@response") {
              set_current_tag(current_tag, data)
              openapi_doc.paths[current_path][current_http_verb].responses[args[1]] ||= { description: args.slice(2).join(" ") }
              current_tag = 'response_' + args[1]
            }
            if(args[0] == "@pathParam") {
              set_current_tag(current_tag, data)
              openapi_doc.paths[current_path][current_http_verb].parameters.push({
                name: args[1],
                in: 'path',
                schema: {
                  type: args[2].replace("*", "").trim(),
                  example: args.slice(3).join(' ')
                },
                required: args[2].includes("*")
              })
            }
            if(args[0] == "@queryParam") {
              set_current_tag(current_tag, data)
              openapi_doc.paths[current_path][current_http_verb].parameters.push({
                name: args[1],
                in: 'query',
                schema: {
                  type: args[2].replace("*", "").trim(),
                  example: args.slice(3).join(' ')
                },
                required: args[2].includes("*")
              })
            }
            if(args[0] == "@bodyParam") {
              console.log("do something with @bodyParam")
              set_current_tag(current_tag, data)
            }
          } else {
            if(line) data += line + "\n"
          }
        }
      })
      if (current_tag && data != "") {
        openapi_doc.paths[current_path][current_tag] = data.trim();
      }
      console.log(JSON.stringify(openapi_doc, null, 2))
    });
  } else {
    execSync("./luaonbeans.org -D . -i beans.lua " + args.join(" "));
  }
}
